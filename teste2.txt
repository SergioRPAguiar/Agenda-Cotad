arquivos Frontend
app/
├── (tabs)/
│   ├── [date]/
│   └─ ├── _layout.tsx
│      ├── manha.tsx
│      ├── noite.tsx
│      ├── tarde.tsx
├── context/
│   ├── AuthContext.tsx
├── aluno/
    ├── _layout.tsx
    ├── index.tsx
├── professor/
    ├── _layout.tsx
    ├── index.tsx
├── _layout.tsx
├── index.tsx
├── login.tsx
├── registro.tsx
├── components/
    ├── Botao.tsx
    ├── Calendario.tsx
    ├── HorariosDisponiveis.tsx
    ├── Input.tsx
    ├── ProximaReuniao.tsx
    ├── ProximaReuniaoAluno.tsx
to com esse fluxo onde o professor tem acesso a alteração de horarios, te mandar os arquivos pra vc entender D:\Facul\DesenMoveis\agenda-cotad\src\components\Calendario.tsx: import React, { useState } from 'react';
import { View, Text, StyleSheet } from 'react-native';
import { Calendar } from 'react-native-calendars'; // Importa o componente de calendário
import { useRouter } from 'expo-router'; // Import para navegação dinâmica
import { useAuth } from '@/app/context/AuthContext';
import axios from 'axios';
import { API_URL } from '@/app/context/AuthContext';

const Calendario = ({ isProfessor }: { isProfessor: boolean }) => {
  const router = useRouter();
  const { user } = useAuth();
  const [selectedDate, setSelectedDate] = useState<string | null>(null);
  const [horarios, setHorarios] = useState<{ [key: string]: string[] }>({});

  const fetchHorariosDisponiveis = async (date: string) => {
    try {
      const response = await axios.get(`${API_URL}/meeting`, {
        params: { date, professorId: user?.id }
      });
      setHorarios(response.data);
      setSelectedDate(date);
    } catch (error) {
      console.error("Erro ao buscar horários:", error);
    }
  };

  const handleDayPress = (day: any) => {
    const selectedDate = day.dateString;
    setSelectedDate(selectedDate);

    if (isProfessor) {
      // Redirecionar para a rota do professor passando a data
      router.push(`/(tabs)/${selectedDate}`);
    } else {
      // Buscar horários disponíveis, se for o aluno
      fetchHorariosDisponiveis(selectedDate);
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Selecione um dia</Text>
      <Calendar
        onDayPress={handleDayPress}
        markedDates={{
          [selectedDate || '']: { selected: true, selectedColor: '#00adf5' },
        }}
        minDate={new Date().toISOString().split('T')[0]} // Evita selecionar datas passadas
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    padding: 10,
    backgroundColor: '#fff',
    borderRadius: 10,
    elevation: 5,
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 5,
  },
});

export default Calendario;
D:\Facul\DesenMoveis\agenda-cotad\src\components\HorariosDisponiveis.tsx: import React, { useState } from 'react';
import { View, Text, TextInput, StyleSheet, TouchableOpacity } from 'react-native';
import axios from 'axios'; // Certifique-se de importar o axios
import { API_URL } from '@/app/context/AuthContext'; // Certifique-se de importar a API_URL
import Botao from './Botao';

const HorariosDisponiveis = ({ horarios, isProfessor, selectedDate }: { horarios: { [key: string]: string[] }, isProfessor: boolean, selectedDate: string }) => {
  const [selectedHorario, setSelectedHorario] = useState<string | null>(null);
  const [motivo, setMotivo] = useState('');

  const handleConfirmHorario = async () => {
    try {
      const url = isProfessor ? `${API_URL}/professor/set-horario` : `${API_URL}/meeting`;
      const response = await axios.post(url, {
        date: selectedDate,
        time: selectedHorario,
        motivo: isProfessor ? undefined : motivo, // Motivo é requerido apenas para alunos
      });
      console.log("Horário Confirmado:", response.data);
    } catch (error) {
      console.error("Erro ao confirmar horário:", error);
    }
  };

  return (
    <View>
      <Text>Horários Disponíveis</Text>
      {/* Lógica para exibir os horários e permitir a seleção */}
      {Object.keys(horarios).map((time) => (
        <TouchableOpacity key={time} onPress={() => setSelectedHorario(time)}>
          <Text>{time}</Text>
        </TouchableOpacity>
      ))}

      {selectedHorario && (
        <View style={styles.confirmContainer}>
          {!isProfessor && (
            <TextInput
              style={styles.input}
              placeholder="Motivo da reunião"
              value={motivo}
              onChangeText={setMotivo}
            />
          )}
          <Botao title="Confirmar Horário" onPress={handleConfirmHorario} />
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  confirmContainer: {
    marginTop: 20,
  },
  input: {
    height: 50,
    borderColor: '#ccc',
    borderWidth: 1,
    borderRadius: 5,
    padding: 10,
    marginBottom: 10,
  },
});

export default HorariosDisponiveis;
D:\Facul\DesenMoveis\agenda-cotad\src\components\ProximaReuniao.tsx:// src/components/ProximaReuniao.tsx

import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet } from 'react-native';
import { useAuth } from '@/app/context/AuthContext';

const ProximaReuniao = () => {
  const { user } = useAuth();
  const [proximaReuniao, setProximaReuniao] = useState<string | null>(null);

  useEffect(() => {
    // Aqui você faria a requisição para a API para buscar a próxima reunião do aluno
    // Exemplo: fetch(`/api/proxima-reuniao/${user.id}`)
    const fetchProximaReuniao = async () => {
      // Simulação de uma chamada API
      const response = await new Promise<{ data: string | null }>((resolve) =>
        setTimeout(() => resolve({ data: null }), 1000) // substitua por chamada real
      );
      setProximaReuniao(response.data);
    };

    fetchProximaReuniao();
  }, [user]);

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Próxima Reunião</Text>
      <Text style={styles.info}>
        {proximaReuniao ? proximaReuniao : '-'}
      </Text>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    padding: 10,
    backgroundColor: '#fff',
    borderRadius: 10,
    elevation: 5,
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 5,
  },
  info: {
    fontSize: 16,
    color: '#008739',
  },
});

export default ProximaReuniao;
D:\Facul\DesenMoveis\agenda-cotad\src\components\ProximaReuniaoAluno.tsx: import React from 'react';
import { View, Text, StyleSheet } from 'react-native';

const ProximaReuniaoAluno = ({ proximaReuniao }: { proximaReuniao?: string }) => {
  return (
    <View style={styles.container}>
      <Text style={styles.title}>Próxima Reunião:</Text>
      <Text style={styles.reuniao}>
        {proximaReuniao ? proximaReuniao : '—'}
      </Text>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    padding: 20,
    backgroundColor: '#fff',
    borderRadius: 10,
    elevation: 5,
    marginVertical: 10,
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
  },
  reuniao: {
    fontSize: 16,
    marginTop: 10,
  },
});

export default ProximaReuniaoAluno;
D:\Facul\DesenMoveis\agenda-cotad\src\app\_layout.tsx: import React from "react";
import { Stack } from "expo-router";
import { AuthProvider } from "./context/AuthContext";
import { useFonts, Poppins_400Regular, Poppins_500Medium, Poppins_700Bold } from "@expo-google-fonts/poppins";

// Componente para o layout raiz
export default function RootLayout() {
  const [fontsLoaded] = useFonts({
    Poppins_400Regular,
    Poppins_500Medium,
    Poppins_700Bold,
  });

  if (!fontsLoaded) {
    return null;
  }

  return (
    <AuthProvider>
      <Stack screenOptions={{ headerShown: false }}>
        <Stack.Screen name="index" />
        {/* Adiciona outras telas conforme necessário */}
      </Stack>
    </AuthProvider>
  );
}
D:\Facul\DesenMoveis\agenda-cotad\src\app\index.tsx: import { useRouter } from "expo-router";
import { useEffect } from "react";
import { useAuth } from "./context/AuthContext";

export default function Index() {
  const { authState } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (authState?.authenticated !== null) {
      const isProfessor = authState.user?.professor; // Verificar se o usuário é professor pelo campo 'professor'
      if (authState.authenticated) {
        if (authState.user?.professor) {
          router.push('/professor'); // Redireciona para a página do professor
        } else {
          router.push('/aluno'); // Redireciona para a página do aluno
        }
      } else {
        console.log("Indo para o login");
        router.replace("/login"); // Redireciona para a página de login se não autenticado
      }
    }
  }, [authState, router]);

  return null;
}
D:\Facul\DesenMoveis\agenda-cotad\src\app\professor\_layout.tsx: import { Stack } from 'expo-router';

export default function ProfessorLayout() {
  return (
    <Stack screenOptions={{ headerShown: false }}>
      <Stack.Screen name="index" />
    </Stack>
  );
}
D:\Facul\DesenMoveis\agenda-cotad\src\app\professor\index.tsx: import React from 'react';
import { View, Text, StyleSheet, FlatList, Button } from 'react-native';
import ProximaReuniao from '@/components/ProximaReuniao';
import Calendario from '@/components/Calendario';
import { useAuth } from '@/app/context/AuthContext';

const Painel = () => {
  const { onLogout } = useAuth(); // Usar o contexto de autenticação

  const components = [
    { key: 'ProximaReuniao', title: 'Próxima Reunião', component: <ProximaReuniao /> },
    { key: 'Calendario', title: 'Calendário', component: <Calendario isProfessor={true} /> }, // isProfessor=true
  ];

  return (
    <View style={styles.container}>
      <FlatList
        data={components}
        keyExtractor={(item) => item.key}
        renderItem={({ item }) => (
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>{item.title}</Text>
            {item.component}
          </View>
        )}
        contentContainerStyle={styles.contentContainer}
      />
      <Button title="Logout" onPress={onLogout} />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    paddingVertical: 10,
  },
  contentContainer: {
    flexGrow: 1,
  },
  section: {
    paddingHorizontal: 20,
    marginVertical: 10,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 10,
  },
});

export default Painel;
D:\Facul\DesenMoveis\agenda-cotad\src\app\(tabs)\[date]\_layout.tsx: import { Tabs } from "expo-router";
import { useLocalSearchParams } from 'expo-router';

export default function RootTabs() {
  const { date } = useLocalSearchParams();

  return (
    <Tabs>
      <Tabs.Screen name="manha" />
      <Tabs.Screen name="tarde" />
      <Tabs.Screen name="noite" />
    </Tabs>
  );
} D:\Facul\DesenMoveis\agenda-cotad\src\app\(tabs)\[date]\manha.tsx: import React, { useState } from 'react';
import { View, Text, StyleSheet, ScrollView } from 'react-native';
import { Checkbox } from 'react-native-paper';

const Manha = () => {
  const [horarios, setHorarios] = useState([
    { time: '07:00 - 07:15', available: false },
    { time: '07:15 - 07:30', available: false },
    { time: '07:30 - 07:45', available: false },
    { time: '07:45 - 08:00', available: false },
    { time: '08:00 - 08:15', available: false },
    { time: '08:15 - 08:30', available: false },
    { time: '08:30 - 08:45', available: false },
    { time: '08:45 - 09:00', available: false },
    { time: '09:00 - 09:15', available: false },
    { time: '09:15 - 09:30', available: false },
    { time: '09:30 - 09:45', available: false },
    { time: '09:45 - 10:00', available: false },
    { time: '10:00 - 10:15', available: false },
    { time: '10:15 - 10:30', available: false },
    { time: '10:30 - 10:45', available: false },
    { time: '10:45 - 11:00', available: false },
    { time: '11:00 - 11:15', available: false },
    { time: '11:15 - 11:30', available: false },
    { time: '11:30 - 11:45', available: false },
    { time: '11:45 - 12:00', available: false },
  ]);

  const toggleDisponibilidade = (index: number) => {
    const newHorarios = [...horarios];
    newHorarios[index].available = !newHorarios[index].available;
    setHorarios(newHorarios);
  };

  return (
    <ScrollView contentContainerStyle={styles.container}>
      <Text style={styles.headerText}>Horários da Manhã</Text>
      {horarios.map((horario, index) => (
        <View key={index} style={styles.horarioContainer}>
          <Text style={styles.text}>{horario.time}</Text>
          <Checkbox
            status={horario.available ? 'checked' : 'unchecked'}
            onPress={() => toggleDisponibilidade(index)}
          />
        </View>
      ))}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flexGrow: 1,
    padding: 20,
    backgroundColor: '#fff',
  },
  headerText: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 10,
    textAlign: 'center',
  },
  horarioContainer: {
    flexDirection: 'row', // Para alinhar a checkbox com o texto na horizontal
    justifyContent: 'space-between', // Para colocar a checkbox à direita
    alignItems: 'center',
    marginBottom: 10,
  },
  text: {
    fontSize: 18,
  },
});

export default Manha;
tbm tem o D:\Facul\DesenMoveis\agenda-cotad\src\app\(tabs)\[date]\noite.tsx: import React, { useState } from 'react';
import { View, Text, StyleSheet, ScrollView } from 'react-native';
import { Checkbox } from 'react-native-paper';

const Noite = () => {
  const [horarios, setHorarios] = useState([
    { time: '18:00 - 18:15', available: false },
    { time: '18:15 - 18:30', available: false },
    { time: '18:30 - 18:45', available: false },
    { time: '18:45 - 19:00', available: false },
    { time: '19:00 - 19:15', available: false },
    { time: '19:15 - 19:30', available: false },
    { time: '19:30 - 19:45', available: false },
    { time: '19:45 - 20:00', available: false },
    { time: '20:00 - 20:15', available: false },
    { time: '20:15 - 20:30', available: false },
    { time: '20:30 - 20:45', available: false },
    { time: '20:45 - 21:00', available: false },
    { time: '21:00 - 21:15', available: false },
    { time: '21:15 - 21:30', available: false },
    { time: '21:30 - 21:45', available: false },
    { time: '21:45 - 22:00', available: false },
  ]);

  const toggleDisponibilidade = (index: number) => {
    const newHorarios = [...horarios];
    newHorarios[index].available = !newHorarios[index].available;
    setHorarios(newHorarios);
  };

  return (
    <ScrollView contentContainerStyle={styles.container}>
      <Text style={styles.headerText}>Horários da Noite</Text>
      {horarios.map((horario, index) => (
        <View key={index} style={styles.horarioContainer}>
          <Text style={styles.text}>{horario.time}</Text>
          <Checkbox
            status={horario.available ? 'checked' : 'unchecked'}
            onPress={() => toggleDisponibilidade(index)}
          />
        </View>
      ))}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flexGrow: 1,
    padding: 20,
    backgroundColor: '#fff',
  },
  headerText: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 10,
    textAlign: 'center',
  },
  horarioContainer: {
    flexDirection: 'row', 
    justifyContent: 'space-between', 
    alignItems: 'center',
    marginBottom: 10,
  },
  text: {
    fontSize: 18,
  },
});

export default Noite;
 e D:\Facul\DesenMoveis\agenda-cotad\src\app\(tabs)\[date]\tarde.tsx: import React, { useState } from 'react';
import { View, Text, StyleSheet, ScrollView } from 'react-native';
import { Checkbox } from 'react-native-paper';

const Tarde = () => {
  const [horarios, setHorarios] = useState([
    { time: '12:00 - 12:15', available: false },
    { time: '12:15 - 12:30', available: false },
    { time: '12:30 - 12:45', available: false },
    { time: '12:45 - 13:00', available: false },
    { time: '13:00 - 13:15', available: false },
    { time: '13:15 - 13:30', available: false },
    { time: '13:30 - 13:45', available: false },
    { time: '13:45 - 14:00', available: false },
    { time: '14:00 - 14:15', available: false },
    { time: '14:15 - 14:30', available: false },
    { time: '14:30 - 14:45', available: false },
    { time: '14:45 - 15:00', available: false },
    { time: '15:00 - 15:15', available: false },
    { time: '15:15 - 15:30', available: false },
    { time: '15:30 - 15:45', available: false },
    { time: '15:45 - 16:00', available: false },
    { time: '16:00 - 16:15', available: false },
    { time: '16:15 - 16:30', available: false },
    { time: '16:30 - 16:45', available: false },
    { time: '16:45 - 17:00', available: false },
    { time: '17:00 - 17:15', available: false },
    { time: '17:15 - 17:30', available: false },
    { time: '17:30 - 17:45', available: false },
    { time: '17:45 - 18:00', available: false },
  ]);

  const toggleDisponibilidade = (index: number) => {
    const newHorarios = [...horarios];
    newHorarios[index].available = !newHorarios[index].available;
    setHorarios(newHorarios);
  };

  return (
    <ScrollView contentContainerStyle={styles.container}>
      <Text style={styles.headerText}>Horários da Tarde</Text>
      {horarios.map((horario, index) => (
        <View key={index} style={styles.horarioContainer}>
          <Text style={styles.text}>{horario.time}</Text>
          <Checkbox
            status={horario.available ? 'checked' : 'unchecked'}
            onPress={() => toggleDisponibilidade(index)}
          />
        </View>
      ))}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flexGrow: 1,
    padding: 20,
    backgroundColor: '#fff',
  },
  headerText: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 10,
    textAlign: 'center',
  },
  horarioContainer: {
    flexDirection: 'row', 
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 10,
  },
  text: {
    fontSize: 18,
  },
});

export default Tarde;
D:\Facul\DesenMoveis\agenda-cotad\src\app\aluno\_layout.tsx: import { Stack } from 'expo-router';

export default function AlunoLayout() {
  return (
    <Stack screenOptions={{ headerShown: false }}>
      <Stack.Screen name="index" />
    </Stack>
  );
} D:\Facul\DesenMoveis\agenda-cotad\src\app\aluno\index.tsx: import React from 'react';
import { View, Text, StyleSheet, FlatList, Button } from 'react-native';
import ProximaReuniaoAluno from '@/components/ProximaReuniaoAluno';
import Calendario from '@/components/Calendario';
import { useAuth } from '@/app/context/AuthContext';

const PainelAluno = () => {
  const { onLogout } = useAuth(); // Usar o contexto de autenticação

  const components = [
    { key: 'ProximaReuniaoAluno', title: 'Próxima Reunião', component: <ProximaReuniaoAluno /> },
    { key: 'Calendario', title: 'Calendário', component: <Calendario isProfessor={false} /> }, // isProfessor=false
  ];

  return (
    <View style={styles.container}>
      <FlatList
        data={components}
        keyExtractor={(item) => item.key}
        renderItem={({ item }) => (
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>{item.title}</Text>
            {item.component}
          </View>
        )}
        contentContainerStyle={styles.contentContainer}
      />
      <Button title="Logout" onPress={onLogout} />
    </View>
  );
};


const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    paddingVertical: 10,
  },
  contentContainer: {
    flexGrow: 1,
  },
  section: {
    paddingHorizontal: 20,
    marginVertical: 10,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 10,
  },
});

export default PainelAluno;
