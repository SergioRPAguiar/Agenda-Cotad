so pra conxtetualizar meu app funciona assim o usuario 
professor entra e clica em um dia no calendario e dentro
 desse dia ele cai num tabs contendo manha/tarde/noite e 
 nesses arquivos tem checkbox de horarios em que ao marcada
  esse horario vira um horario disponivel pra reuniao, 
  onde no usuario aluno ele vai entrar tbm clicar num dia
   do calendario em que ele queira marcar uma reuniao e 
   nesse dia clicado vai aparecer os horarios disponiveis
    que o professor escolheu, e quando escolhido um horario
     o aluno vai marcar com a checkbox a hora q ele quer e
      embaixo dps de selecionar a checkboc vai abrir um 
      campo de texto para ele digitar o motivo da reuniao
       e logo abaixo o botao de "marcar reuniao"

       deu certo, agora no fluxo do aluno eu quero fazer o seguinte quando ele entrar vai aparece o calendario renderizado pra ele, e ele vai poder clicar em alguma dia qualquer (sem ser dia que ja foi) pra ver se aquele dia o professor tem horarios disponiveis pra uma reuniao (vou te mandar a logica do professor: src\app\index.tsx: import { useRouter } from "expo-router";
import { useEffect } from "react";
import { useAuth } from "./context/AuthContext";

export default function Index() {
  const { authState } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (authState?.authenticated !== null) {
      const isProfessor = authState.user?.professor; // Verificar se o usuário é professor pelo campo 'professor'
      if (authState.authenticated) {
        if (authState.user?.professor) {
          router.push('/professor'); // Redireciona para a página do professor
        } else {
          router.push('/aluno'); // Redireciona para a página do aluno
        }
      } else {
        console.log("Indo para o login");
        router.replace("/login"); // Redireciona para a página de login se não autenticado
      }
    }
  }, [authState, router]);

  return null;
}
src\app\professor\index.tsx: import React from 'react';
import { View, Text, StyleSheet, FlatList, TouchableOpacity } from 'react-native';
import ProximaReuniao from '@/components/ProximaReuniao';
import Calendario from '@/components/Calendario';
import { useAuth } from '@/app/context/AuthContext';

const Painel = () => {
  const { onLogout } = useAuth();  // Contexto de autenticação para logout

  const components = [
    { key: 'ProximaReuniao', title: 'Próxima Reunião', component: <ProximaReuniao /> },
    { key: 'Calendario', title: 'Calendário', component: <Calendario isProfessor={true} /> },  // Componente com isProfessor=true
  ];

  return (
    <View style={styles.container}>
      <FlatList
        data={components}
        keyExtractor={(item) => item.key}
        renderItem={({ item }) => (
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>{item.title}</Text>
            {item.component}
          </View>
        )}
        contentContainerStyle={styles.contentContainer}
      />
      <TouchableOpacity style={styles.logoutButton} onPress={onLogout}>
        <Text style={styles.logoutText}>Logout</Text>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    paddingVertical: 10,
  },
  logoutButton: {
    backgroundColor: '#ff4d4d', // Cor de fundo para o botão
    padding: 15,
    alignItems: 'center',
    justifyContent: 'center',
    borderRadius: 10,
    margin: 20,
  },
  logoutText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  contentContainer: {
    flexGrow: 1,
  },
  section: {
    paddingHorizontal: 20,
    marginVertical: 10,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 10,
  },
});

export default Painel;
src\app\(tabs)\[date]\_layout.tsx: import { Tabs } from "expo-router";
import { useLocalSearchParams } from 'expo-router';

export default function RootTabs() {
  const { date } = useLocalSearchParams();

  return (
    <Tabs>
      <Tabs.Screen name="manha" />
      <Tabs.Screen name="tarde" />
      <Tabs.Screen name="noite" />
    </Tabs>
  );
}
src\app\(tabs)\[date]\manha.tsx: import React, { useEffect, useState } from 'react';
import { View, Text, ScrollView, Button, StyleSheet } from 'react-native';
import { Checkbox } from 'react-native-paper';
import axios from 'axios';
import { useRouter, useLocalSearchParams } from 'expo-router';
import { API_URL, useAuth } from '@/app/context/AuthContext';
import { useDate } from '@/app/context/DateContext';

const Manha = () => {
  const router = useRouter();
  const { date } = useLocalSearchParams(); // Captura o parâmetro da URL
  const { selectedDate, setSelectedDate } = useDate(); // Usa a data global
  const [horarios, setHorarios] = useState([
    { time: '07:00 - 07:15', available: false },
    { time: '07:15 - 07:30', available: false },
    { time: '07:30 - 07:45', available: false },
    { time: '07:45 - 08:00', available: false },
    { time: '08:00 - 08:15', available: false },
    { time: '08:15 - 08:30', available: false },
    { time: '08:30 - 08:45', available: false },
    { time: '08:45 - 09:00', available: false },
    { time: '09:00 - 09:15', available: false },
    { time: '09:15 - 09:30', available: false },
    { time: '09:30 - 09:45', available: false },
    { time: '09:45 - 10:00', available: false },
    { time: '10:00 - 10:15', available: false },
    { time: '10:15 - 10:30', available: false },
    { time: '10:30 - 10:45', available: false },
    { time: '10:45 - 11:00', available: false },
    { time: '11:00 - 11:15', available: false },
    { time: '11:15 - 11:30', available: false },
    { time: '11:30 - 11:45', available: false },
    { time: '11:45 - 12:00', available: false },
  ]);

  const { authState } = useAuth();
  const token = authState.token;

  // Atualiza a data selecionada assim que o parâmetro 'date' é carregado da URL
  useEffect(() => {
    if (date) {
      setSelectedDate(date as string); // Atualiza o selectedDate do contexto com o valor da URL
    }
  }, [date]);

  // Função para buscar os horários disponíveis na data selecionada
  const fetchHorarios = async (selectedDate: string) => {
    try {
      const response = await axios.get(`${API_URL}/schedule/available/${selectedDate}`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      const fetchedHorarios = response.data;

      const updatedHorarios = horarios.map(horario => {
        const horarioBackend = fetchedHorarios.find((h: any) => h.timeSlot === horario.time);
        return horarioBackend
          ? { ...horario, available: horarioBackend.available }
          : horario;
      });

      setHorarios(updatedHorarios);
    } catch (error) {
      console.error('Erro ao buscar horários:', error);
    }
  };

  // Chama a função de buscar horários quando a data selecionada muda
  useEffect(() => {
    if (selectedDate) {
      fetchHorarios(selectedDate); // Busca os horários usando a data atualizada do contexto
    }
  }, [selectedDate]);

  // Função para alternar a disponibilidade de um horário
  const toggleDisponibilidade = async (index: number) => {
    const newHorarios = [...horarios];
    newHorarios[index].available = !newHorarios[index].available;
    setHorarios(newHorarios);

    try {
      await axios.post(
        `${API_URL}/schedule`,
        {
          date: selectedDate, // Envia a data como string
          timeSlot: newHorarios[index].time,
          available: newHorarios[index].available,
        },
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      console.log(`Horário ${newHorarios[index].time} atualizado com sucesso!`);
    } catch (error) {
      console.error('Erro ao atualizar horário:', error);
    }
  };

  return (
    <ScrollView contentContainerStyle={styles.container}>
      <Button title="Voltar para o Calendário" onPress={() => router.back()} />

      <Text style={styles.headerText}>Horários da Manhã</Text>

      <Text>Data selecionada: {selectedDate}</Text>

      {horarios.map((horario, index) => (
        <View key={index} style={styles.horarioContainer}>
          <Text style={styles.text}>{horario.time}</Text>
          <Checkbox
            status={horario.available ? 'checked' : 'unchecked'}
            onPress={() => toggleDisponibilidade(index)}
          />
        </View>
      ))}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flexGrow: 1,
    padding: 20,
    backgroundColor: '#fff',
  },
  headerText: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 10,
    textAlign: 'center',
  },
  horarioContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 10,
  },
  text: {
    fontSize: 18,
  },
});

export default Manha; src\app\(tabs)\[date]\noite.tsx e  src\app\(tabs)\[date]\tarde.tsx tem a mesma logica de manha, agora os componentes src\components\Calendario.tsx: import React from 'react';
import { View, Text, StyleSheet } from 'react-native';
import { Calendar } from 'react-native-calendars';
import { useRouter } from 'expo-router';
import { useAuth } from '@/app/context/AuthContext';
import { useDate } from '@/app/context/DateContext'; // Importa o DateContext para gerenciar a data globalmente

const Calendario = ({ isProfessor }: { isProfessor: boolean }) => {
  const router = useRouter();
  const { user } = useAuth();
  const { selectedDate, setSelectedDate } = useDate(); // Usa o contexto para armazenar a data selecionada

  const handleDayPress = (day: any) => {
    const selectedDate = day.dateString;
    setSelectedDate(selectedDate); // Atualiza a data no contexto global

    if (isProfessor) {
      // Redirecionar para a rota do professor passando a data
      router.push(`/(tabs)/${selectedDate}`); // Garante que a data seja passada como parâmetro na URL
    } else {
      // Logica para alunos, caso exista
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Selecione um dia</Text>
      <Calendar
        onDayPress={handleDayPress}
        markedDates={{
          [selectedDate]: { selected: true, selectedColor: '#00adf5' },
        }}
        minDate={new Date().toISOString().split('T')[0]} // Evita selecionar datas passadas
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    padding: 10,
    backgroundColor: '#fff',
    borderRadius: 10,
    elevation: 5,
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 5,
  },
});

export default Calendario;
src\components\HorariosDisponiveis.tsx: import React, { useState } from 'react';
import { View, Text, TextInput, StyleSheet, TouchableOpacity } from 'react-native';
import axios from 'axios'; // Certifique-se de importar o axios
import { API_URL } from '@/app/context/AuthContext'; // Certifique-se de importar a API_URL
import Botao from './Botao';

const HorariosDisponiveis = ({ horarios, isProfessor, selectedDate }: { horarios: { [key: string]: string[] }, isProfessor: boolean, selectedDate: string }) => {
  const [selectedHorario, setSelectedHorario] = useState<string | null>(null);
  const [motivo, setMotivo] = useState('');

  const handleConfirmHorario = async () => {
    try {
      const url = isProfessor ? `${API_URL}/professor/set-horario` : `${API_URL}/meeting`;
      const response = await axios.post(url, {
        date: selectedDate,
        time: selectedHorario,
        motivo: isProfessor ? undefined : motivo, // Motivo é requerido apenas para alunos
      });
      console.log("Horário Confirmado:", response.data);
    } catch (error) {
      console.error("Erro ao confirmar horário:", error);
    }
  };

  return (
    <View>
      <Text>Horários Disponíveis</Text>
      {/* Lógica para exibir os horários e permitir a seleção */}
      {Object.keys(horarios).map((time) => (
        <TouchableOpacity key={time} onPress={() => setSelectedHorario(time)}>
          <Text>{time}</Text>
        </TouchableOpacity>
      ))}

      {selectedHorario && (
        <View style={styles.confirmContainer}>
          {!isProfessor && (
            <TextInput
              style={styles.input}
              placeholder="Motivo da reunião"
              value={motivo}
              onChangeText={setMotivo}
            />
          )}
          <Botao title="Confirmar Horário" onPress={handleConfirmHorario} />
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  confirmContainer: {
    marginTop: 20,
  },
  input: {
    height: 50,
    borderColor: '#ccc',
    borderWidth: 1,
    borderRadius: 5,
    padding: 10,
    marginBottom: 10,
  },
});

export default HorariosDisponiveis;
