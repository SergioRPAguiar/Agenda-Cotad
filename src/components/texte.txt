chat estou fazendo um app, e me foi pedido para sincronizar a rota de professor com a agenda google como podemos fazer isso aqui esta o caminhos arquivos Frontend
app/
├── (tabs)/
│   ├── [date]/
│   └─ ├── _layout.tsx
│      ├── manha.tsx
│      ├── noite.tsx
│      ├── tarde.tsx
├── aluno/
│   ├── [date]/
│   └─ ├── _layout.tsx
│      ├── horariosDia.tsx 
│   ├── _layout.tsx
│   ├── index.tsx
│   ├── reunioesMarcadasAlunos.tsx
├── context/
│   ├── AuthContext.tsx
│   ├── DateContext.tsx
├── professor/
│   ├── _layout.tsx
│   ├── index.tsx
│   ├── reunioesMarcadas.tsx
├── _layout.tsx
├── index.tsx
├── login.tsx
├── registro.tsx
├── components/
│   ├── Botao.tsx
│   ├── Calendario.tsx
│   ├── HorariosDisponiveis.tsx
│   ├── Input.tsx
│   ├── ProximaReuniao.tsx
│   ├── ProximaReuniaoAluno.tsx

Arquivos backend
src
├── auth/
│   ├── guards/
│   └─ ├── jwt.auth.guards.ts
│   ├── interfaces/
│   └─ ├── jwt-payload.interface.ts
│   ├── auth.controller.ts
│   ├── auth.module.ts
│   ├── auth.service.ts
│   ├── jwt.strategy.ts
├── meeting/
│   ├── dto/
│   └─ ├── create-meeting.dto.ts
│   └─ ├── update-meeting.dto.ts
│   ├── schemas/
│   └─ ├── meeting.schema.ts
│   ├── meeting.controller.ts
│   ├── meeting.module.ts
│   ├── meeting.service.ts
├── schedule/
│   ├── dto/
│   └─ ├── create-schedule.dto.ts
│   └─ ├── update-schedule.dto.ts
│   ├── schemas/
│   └─ ├── schedule.schema.ts
│   ├── schedule.controller.ts
│   ├── schedule.module.ts
│   ├── schedule.service.ts
├── user/
│   ├── dto/
│   └─ ├── create-user.dto.ts
│   └─ ├── update-user.dto.ts
│   ├── schemas/
│   └─ ├── user.schema.ts
│   ├── user.controller.ts
│   ├── user.module.ts
│   ├── user.service.ts
├── app.controller.spec.ts
├── app.controller.ts
├── app.module.ts
├── app.service.ts
├── main.ts
Atualmente a minha rota de professor e o seguinte 
src\app\login.tsx: 
import React from 'react';
import { View, Image, StyleSheet, Alert, Text } from 'react-native';
import { useForm, Controller } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import { useAuth } from '@/app/context/AuthContext';
import { useRouter } from 'expo-router';
import { theme } from '@/theme';
import Botao from '@/components/Botao';
import Input from '@/components/Input';

const schema = yup.object({
  email: yup.string().email("Email inválido").required("Informe o email"),
  password: yup.string().min(6, "A senha deve ter pelo menos 6 caracteres").required("Informe a senha"),
});

const Login = () => {
  const { control, handleSubmit, formState: { errors } } = useForm({
    resolver: yupResolver(schema),
  });

  const { onLogin } = useAuth();
  const router = useRouter();

  const handleLogin = async (data: { email: string, password: string }) => {
    const result = await onLogin!(data.email, data.password);
    if (result && result.error) {
      Alert.alert(result.msg);
    } else {
      Alert.alert("Sucesso", "Login bem-sucedido!");
      router.replace('/'); // Substitui a página atual pela página principal, causando um refresh
    }
  };

  const handleNavigateToRegister = () => {
    router.push('/registro');
  };

  return (
    <View style={styles.container}>
      <View style={styles.cabecalho}>
        <Image
          style={styles.image}
          source={require("../../assets/images/logoif.png")}
        />
        <Text style={styles.text}>
          AGENDA{"\n"}COTAD
        </Text>
      </View>
      <View style={styles.form}>
        <Controller
          control={control}
          name="email"
          render={({ field: { onChange, onBlur, value } }) => (
            <Input
              placeholder="Email"
              onChangeText={onChange}
              onBlur={onBlur}
              value={value}
              errorMessage={errors.email?.message}
            />
          )}
        />

        <Controller
          control={control}
          name="password"
          render={({ field: { onChange, onBlur, value } }) => (
            <Input
              placeholder="Senha"
              secureTextEntry={true}
              onChangeText={onChange}
              onBlur={onBlur}
              value={value}
              errorMessage={errors.password?.message}
            />
          )}
        />

        <Botao title="Login" onPress={handleSubmit(handleLogin)} />
        <Botao title="Criar Conta" onPress={handleNavigateToRegister} />
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    paddingTop: 50,
    alignItems: "center",
    justifyContent: "flex-start",
    backgroundColor: "#fff",
    flex: 1,
  },
  cabecalho: {
    alignItems: "center",
    backgroundColor: "#fff",
  },
  text: {
    maxWidth: "80%",
    textAlign: "center",
    fontSize: 50,
    color: "#008739",
    fontFamily: theme.fontFamily.secondary,
    lineHeight: 54,
  },
  form: {
    width: "80%",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "#fff",
  },
  image: {
    maxWidth: 65,
    maxHeight: 65,
    resizeMode: "contain",
    marginBottom: 30,
  },
});

export default Login;
src\app\registro.tsx: 
import React from 'react';
import { View, Image, StyleSheet, Alert, Text } from 'react-native';
import { useForm, Controller } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import { useAuth } from '@/app/context/AuthContext';
import { theme } from '@/theme';
import Botao from '@/components/Botao';
import Input from '@/components/Input';

// Atualizando o schema com o nome correto do campo 'contato'
const schema = yup.object({
  name: yup.string().required("Informe o nome"),
  email: yup.string().email("Email inválido").required("Informe o email"),
  contato: yup.string().required("Informe o contato"), // Aqui é 'contato'
  password: yup.string().min(6, "A senha deve ter pelo menos 6 caracteres").required("Informe a senha"),
});

const Register = () => {
  const { control, handleSubmit, formState: { errors } } = useForm({
    resolver: yupResolver(schema),
  });

  const { onRegister } = useAuth();

  // Garantindo que o 'contato' é passado corretamente
  const handleRegister = async (data: { name: string, email: string, contato: string, password: string }) => {
    const result = await onRegister!(data.name, data.email, data.contato, data.password); // Incluindo contato
    if (result && result.error) {
      Alert.alert(result.msg);
    } else {
      Alert.alert("Sucesso", "Cadastro bem-sucedido!");
    }
  };

  return (
    <View style={styles.container}>
      <View style={styles.cabecalho}>
        <Image
          style={styles.image}
          source={require("../../assets/images/logoif.png")}
        />
        <Text style={styles.text}>
          AGENDA{"\n"}COTAD
        </Text>
      </View>
      <View style={styles.form}>
        <Controller
          control={control}
          name="name"
          render={({ field: { onChange, onBlur, value } }) => (
            <Input
              placeholder="Nome"
              onChangeText={onChange}
              onBlur={onBlur}
              value={value}
              errorMessage={errors.name?.message}
            />
          )}
        />

        <Controller
          control={control}
          name="email"
          render={({ field: { onChange, onBlur, value } }) => (
            <Input
              placeholder="Email"
              onChangeText={onChange}
              onBlur={onBlur}
              value={value}
              errorMessage={errors.email?.message}
            />
          )}
        />

        {/* Alterando 'contact' para 'contato' */}
        <Controller
          control={control}
          name="contato" // Alteração aqui
          render={({ field: { onChange, onBlur, value } }) => (
            <Input
              placeholder="Contato"
              onChangeText={onChange}
              onBlur={onBlur}
              value={value}
              errorMessage={errors.contato?.message} // Erro de validação
            />
          )}
        />

        <Controller
          control={control}
          name="password"
          render={({ field: { onChange, onBlur, value } }) => (
            <Input
              placeholder="Senha"
              secureTextEntry={true}
              onChangeText={onChange}
              onBlur={onBlur}
              value={value}
              errorMessage={errors.password?.message}
            />
          )}
        />

        <Botao title="Registrar" onPress={handleSubmit(handleRegister)} />
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    paddingTop: 50,
    alignItems: "center",
    justifyContent: "flex-start",
    backgroundColor: "#fff",
    flex: 1,
  },
  cabecalho: {
    alignItems: "center",
    backgroundColor: "#fff",
  },
  text: {
    maxWidth: "80%",
    textAlign: "center",
    fontSize: 50,
    color: "#008739",
    fontFamily: theme.fontFamily.secondary,
    lineHeight: 54,
  },
  form: {
    width: "80%",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "#fff",
  },
  image: {
    maxWidth: 65,
    maxHeight: 65,
    resizeMode: "contain",
    marginBottom: 30,
  },
});

export default Register;
src\app\professor\_layout.tsx:
import { Stack } from 'expo-router';

export default function ProfessorLayout() {
  return (
    <Stack screenOptions={{ headerShown: false }}>
      <Stack.Screen name="index" />
    </Stack>
  );
}
src\app\professor\index.tsx:
import React, { useCallback } from 'react';
import { View, Text, StyleSheet, FlatList, TouchableOpacity } from 'react-native';
import ProximaReuniao from '@/components/ProximaReuniao';
import Calendario from '@/components/Calendario';
import { useAuth } from '@/app/context/AuthContext';
import { useFocusEffect } from '@react-navigation/native'; // Usar hook para detectar o foco da tela

const Painel = () => {
  const { onLogout } = useAuth();

  useFocusEffect(
    useCallback(() => {
      // Código para atualizar dados quando voltar à tela do Painel
      console.log('Tela de Painel voltou a ficar em foco.');
    }, [])
  );

  const components = [
    { key: 'ProximaReuniao', component: <ProximaReuniao /> },
    { key: 'Calendario', title: 'Calendário', component: <Calendario isProfessor={true} /> },
  ];

  return (
    <View style={styles.container}>
      <FlatList
        data={components}
        keyExtractor={(item) => item.key}
        renderItem={({ item }) => (
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>{item.title}</Text>
            {item.component}
          </View>
        )}
        contentContainerStyle={styles.contentContainer}
      />
      <TouchableOpacity style={styles.logoutButton} onPress={onLogout}>
        <Text style={styles.logoutText}>Logout</Text>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    paddingVertical: 10,
  },
  logoutButton: {
    backgroundColor: '#ff4d4d',
    padding: 15,
    alignItems: 'center',
    justifyContent: 'center',
    borderRadius: 10,
    margin: 20,
  },
  logoutText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  contentContainer: {
    flexGrow: 1,
  },
  section: {
    paddingHorizontal: 20,
    marginVertical: 10,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 10,
  },
});

export default Painel;
src\app\professor\reunioesMarcadas.tsx: 
import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, TextInput, TouchableOpacity } from 'react-native';
import { useAuth } from '@/app/context/AuthContext';
import axios from 'axios';
import { API_URL } from '@/app/context/AuthContext';
import dayjs from 'dayjs';
import utc from 'dayjs/plugin/utc';
import timezone from 'dayjs/plugin/timezone';
import { router } from 'expo-router';

// Extende dayjs para suportar fuso horário
dayjs.extend(utc);
dayjs.extend(timezone);

interface Reuniao {
  _id: string;
  date: string;
  timeSlot: string;
  reason: string;
  canceled?: boolean; // Propriedade opcional
  cancelReason?: string; // Propriedade opcional para o motivo do cancelamento
}

const ReunioesMarcadas = () => {
  const { authState } = useAuth();
  const [reunioes, setReunioes] = useState<Reuniao[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [cancelarReuniaoId, setCancelarReuniaoId] = useState<string | null>(null);
  const [motivoCancelamento, setMotivoCancelamento] = useState<string>('');

  useEffect(() => {
    const fetchReunioes = async () => {
      try {
        if (authState.user && authState.user._id) {
          console.log('Buscando todas as reuniões futuras para o professor:', authState.user._id);

          const response = await axios.get(`${API_URL}/meeting/allFutureForProfessor`);
          console.log('Resposta da API com todas as reuniões:', response.data);

          let reunioesData: Reuniao[] = [];

          if (Array.isArray(response.data)) {
            reunioesData = response.data;
          } else if (response.data && typeof response.data === 'object') {
            reunioesData = [response.data];
          }

          const filteredReunioes = reunioesData.filter((reuniao) => !reuniao.canceled);
          setReunioes(filteredReunioes);
        }
      } catch (error) {
        console.error('Erro ao buscar reuniões:', error);
        setError('Erro ao buscar reuniões');
      } finally {
        setLoading(false);
      }
    };

    fetchReunioes();
  }, [authState]);

  const handleCancelar = async () => {
    if (!motivoCancelamento.trim()) {
      alert('Por favor, insira o motivo do cancelamento.');
      return;
    }

    try {
      await axios.patch(`${API_URL}/meeting/${cancelarReuniaoId}/cancel`, { reason: motivoCancelamento });
      setReunioes((prevReunioes) => prevReunioes.filter((reuniao) => reuniao._id !== cancelarReuniaoId));
      alert('Reunião cancelada com sucesso.');
      setCancelarReuniaoId(null);
      setMotivoCancelamento('');
    } catch (error) {
      console.error('Erro ao cancelar a reunião:', error);
      alert('Erro ao cancelar a reunião.');
    }
  };

  if (loading) {
    return <Text>Carregando reuniões...</Text>;
  }

  if (error) {
    return <Text>Erro: {error}</Text>;
  }

  return (
    <View style={styles.container}>
      {reunioes.length > 0 ? (
        reunioes.map((reuniao) => (
          <View key={reuniao._id} style={styles.reuniaoContainer}>
            <Text>Data: {reuniao.date}</Text>
            <Text>Hora: {reuniao.timeSlot}</Text>
            <Text>Motivo: {reuniao.reason}</Text>

            {cancelarReuniaoId === reuniao._id ? (
              <>
                <TextInput
                  style={styles.input}
                  placeholder="Motivo do cancelamento"
                  value={motivoCancelamento}
                  onChangeText={setMotivoCancelamento}
                />
                <TouchableOpacity style={styles.confirmButton} onPress={handleCancelar}>
                  <Text style={styles.buttonText}>Confirmar cancelamento</Text>
                </TouchableOpacity>
                <TouchableOpacity style={styles.cancelButton} onPress={() => setCancelarReuniaoId(null)}>
                  <Text style={styles.buttonText}>Cancelar</Text>
                </TouchableOpacity>
              </>
            ) : (
              <TouchableOpacity style={styles.cancelButton} onPress={() => setCancelarReuniaoId(reuniao._id)}>
                <Text style={styles.buttonText}>Desmarcar reunião</Text>
              </TouchableOpacity>
            )}
          </View>
        ))
      ) : (
        <Text>Sem reuniões futuras marcadas</Text>
      )}
      <TouchableOpacity style={styles.backButton} onPress={() => router.push('/professor')}>
        <Text style={styles.buttonText}>Voltar ao Calendário</Text>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    padding: 20,
    backgroundColor: '#fff',
  },
  reuniaoContainer: {
    marginBottom: 20,
    padding: 10,
    borderColor: '#ddd',
    borderWidth: 1,
    borderRadius: 5,
  },
  input: {
    borderColor: '#ccc',
    borderWidth: 1,
    padding: 10,
    marginBottom: 10,
    borderRadius: 5,
  },
  confirmButton: {
    backgroundColor: '#28a745',
    padding: 10,
    borderRadius: 5,
    alignItems: 'center',
    marginBottom: 10,
  },
  cancelButton: {
    backgroundColor: '#ff0000',
    padding: 10,
    borderRadius: 5,
    alignItems: 'center',
    marginBottom: 10,
  },
  backButton: {
    backgroundColor: '#007bff',
    padding: 10,
    borderRadius: 5,
    alignItems: 'center',
    marginTop: 10,
  },
  buttonText: {
    color: '#fff',
    fontWeight: 'bold',
  },
});

export default ReunioesMarcadas;
src\components\Calendario.tsx:
import React from 'react';
import { View, Text, StyleSheet } from 'react-native';
import { Calendar } from 'react-native-calendars';
import { useRouter } from 'expo-router';
import { useAuth } from '@/app/context/AuthContext';
import { useDate } from '@/app/context/DateContext'; // Importa o DateContext para gerenciar a data globalmente

const Calendario = ({ isProfessor }: { isProfessor: boolean }) => {
  const router = useRouter();
  const { user } = useAuth();
  const { selectedDate, setSelectedDate } = useDate(); // Usa o contexto para armazenar a data selecionada

  const handleDayPress = (day: any) => {
    const selectedDate = day.dateString;
    setSelectedDate(selectedDate); // Atualiza a data no contexto global

    if (isProfessor) {
      console.log(selectedDate);// Redirecionar para a rota do professor passando a data
      router.push(`/(tabs)/${selectedDate}`); // Garante que a data seja passada como parâmetro na URL
    } else {
      router.push(`/aluno/${selectedDate}`); 
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Selecione um dia</Text>
      <Calendar
        onDayPress={handleDayPress}
        markedDates={{
          [selectedDate]: { selected: true, selectedColor: '#00adf5' },
        }}
        minDate={new Date().toISOString().split('T')[0]} // Evita selecionar datas passadas
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    padding: 10,
    backgroundColor: '#fff',
    borderRadius: 10,
    elevation: 5,
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 5,
  },
});

export default Calendario;
src\components\HorariosDisponiveis.tsx:
import React, { useState } from 'react';
import { View, Text, TextInput, StyleSheet, TouchableOpacity } from 'react-native';
import axios from 'axios'; // Certifique-se de importar o axios
import { API_URL } from '@/app/context/AuthContext'; // Certifique-se de importar a API_URL
import Botao from './Botao';

const HorariosDisponiveis = ({ horarios, isProfessor, selectedDate }: { horarios: { [key: string]: string[] }, isProfessor: boolean, selectedDate: string }) => {
  const [selectedHorario, setSelectedHorario] = useState<string | null>(null);
  const [motivo, setMotivo] = useState('');

  const handleConfirmHorario = async () => {
    try {
      const url = isProfessor ? `${API_URL}/professor/set-horario` : `${API_URL}/meeting`;
      const response = await axios.post(url, {
        date: selectedDate,
        time: selectedHorario,
        motivo: isProfessor ? undefined : motivo, // Motivo é requerido apenas para alunos
      });
      console.log("Horário Confirmado:", response.data);
    } catch (error) {
      console.error("Erro ao confirmar horário:", error);
    }
  };

  return (
    <View>
      <Text>Horários Disponíveis</Text>
      {/* Lógica para exibir os horários e permitir a seleção */}
      {Object.keys(horarios).map((time) => (
        <TouchableOpacity key={time} onPress={() => setSelectedHorario(time)}>
          <Text>{time}</Text>
        </TouchableOpacity>
      ))}

      {selectedHorario && (
        <View style={styles.confirmContainer}>
          {!isProfessor && (
            <TextInput
              style={styles.input}
              placeholder="Motivo da reunião"
              value={motivo}
              onChangeText={setMotivo}
            />
          )}
          <Botao title="Confirmar Horário" onPress={handleConfirmHorario} />
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  confirmContainer: {
    marginTop: 20,
  },
  input: {
    height: 50,
    borderColor: '#ccc',
    borderWidth: 1,
    borderRadius: 5,
    padding: 10,
    marginBottom: 10,
  },
});







